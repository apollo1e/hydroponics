#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/i2c.h"
#include "pico/cyw43_arch.h"
#include "lwip/apps/mqtt.h"
#include "lwip/ip4_addr.h"

// I2C address for the AS7341 sensor
#define AS7341_ADDR 0x39
#define MQTT_BROKER_IP "5.196.78.28"
#define MQTT_TOPIC "pico/as7341/data"
#define MQTT_PORT 1883

// Register addresses for AS7341 channels
#define CH0_DATA_L 0x95
#define CH0_DATA_H 0x96
#define CH1_DATA_L 0x97
#define CH1_DATA_H 0x98
#define CH2_DATA_L 0x99
#define CH2_DATA_H 0x9A
#define CH3_DATA_L 0x9B
#define CH3_DATA_H 0x9C
#define CH4_DATA_L 0x9D
#define CH4_DATA_H 0x9E
#define CH5_DATA_L 0x9F
#define CH5_DATA_H 0xA0

// Function to initialize I2C communication
void i2c_init_pico() {
    i2c_init(i2c0, 100 * 1000);
    gpio_set_function(0, GPIO_FUNC_I2C);
    gpio_set_function(1, GPIO_FUNC_I2C);
    gpio_pull_up(0);
    gpio_pull_up(1);
}

// Function to connect to Wi-Fi
void connect_wifi() {
    if (cyw43_arch_init() != 0) {
        printf("Failed to initialize Wi-Fi module.\n");
        return;
    }

    cyw43_arch_enable_sta_mode();
    printf("Connecting to Wi-Fi...\n");

    if (cyw43_arch_wifi_connect_timeout_ms(WIFI_SSID, WIFI_PASSWORD, CYW43_AUTH_WPA2_AES_PSK, 60000)) {
        printf("Failed to connect to Wi-Fi.\n");
    } else {
        printf("Connected to Wi-Fi.\n");
        printf("Pico W IP address: %s\n", ip4addr_ntoa(netif_ip4_addr(netif_list)));
    }
}

// Function to write to a register on the AS7341 sensor
void write_register(uint8_t reg, uint8_t value) {
    uint8_t data[2] = {reg, value};
    i2c_write_blocking(i2c0, AS7341_ADDR, data, 2, false);  // Send the register address and value
}

// Function to initialize the AS7341 sensor
void as7341_init() {
    write_register(0x80, 0x00);  // Clear any previous settings
    sleep_ms(10);
    write_register(0x80, 0x01);  // PON = 1, SP_EN = 0 (sensor powered on)
    sleep_ms(10);
    write_register(0x80, 0x03);  // PON = 1, SP_EN = 1 (start spectral measurement)
    sleep_ms(100);  // Wait for sensor to initialize

    // Set gain for moderate sensitivity
    write_register(0xAA, 0x05);  // Set gain to 16x
    
    // Set integration time
    write_register(0x81, 0x40);
    // Write initialization commands for the AS7341 if required
    printf("AS7341 Sensor Initialized.\n");
}

// MQTT connection callback
static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status) {
    if (status == MQTT_CONNECT_ACCEPTED) {
        printf("Connected to MQTT broker.\n");
    } else {
        printf("MQTT connection failed with status: %d\n", status);
    }
}

// Function to publish AS7341 data via MQTT
void publish_as7341_data(mqtt_client_t *client, uint16_t ch0, uint16_t ch1, uint16_t ch2, uint16_t ch3, uint16_t ch4, uint16_t ch5) {
    char payload[256];
    snprintf(payload, sizeof(payload),
             "{\"channel_0 (Violet)\": %u, \"channel_1 (Blue) \": %u, \"channel_2 (Cyan)\": %u, \"channel_3 (Green)\": %u, \"channel_4 (Yellow) \": %u, \"channel_5 (Orange)\": %u}",
             ch0, ch1, ch2, ch3, ch4, ch5);
    err_t err = mqtt_publish(client, MQTT_TOPIC, payload, strlen(payload), 0, 0, NULL, NULL);
    if (err == ERR_OK) {
        printf("Published AS7341 data: %s\n", payload);
    } else {
        printf("Failed to publish AS7341 data: %d\n", err);
    }
}

// Function to connect to the MQTT broker
void connect_to_mqtt_broker(mqtt_client_t *client) {
    struct mqtt_connect_client_info_t client_info = {
        .client_id = "PicoAS7341Client",
    };

    ip4_addr_t broker_ip;
    if (!ip4addr_aton(MQTT_BROKER_IP, &broker_ip)) {
        printf("Failed to convert MQTT broker IP address.\n");
        return;
    }

    mqtt_client_connect(client, &broker_ip, MQTT_PORT, mqtt_connection_cb, NULL, &client_info);
}

// Function to read AS7341 spectral data (Change this)
uint16_t read_channel(uint8_t low_reg, uint8_t high_reg) {
    uint8_t low_byte, high_byte;

    // Read the low byte
    i2c_write_blocking(i2c0, AS7341_ADDR, &low_reg, 1, true);
    i2c_read_blocking(i2c0, AS7341_ADDR, &low_byte, 1, false);

    // Read the high byte
    i2c_write_blocking(i2c0, AS7341_ADDR, &high_reg, 1, true);
    i2c_read_blocking(i2c0, AS7341_ADDR, &high_byte, 1, false);

    // Combine the bytes into a 16-bit value
    return (high_byte << 8) | low_byte;
}

// Function to read and publish AS7341 spectral data
void read_and_publish_as7341_data(mqtt_client_t *client) {
    // Read each channel's data
    uint16_t ch0 = read_channel(CH0_DATA_L, CH0_DATA_H);
    uint16_t ch1 = read_channel(CH1_DATA_L, CH1_DATA_H);
    uint16_t ch2 = read_channel(CH2_DATA_L, CH2_DATA_H);
    uint16_t ch3 = read_channel(CH3_DATA_L, CH3_DATA_H);
    uint16_t ch4 = read_channel(CH4_DATA_L, CH4_DATA_H);
    uint16_t ch5 = read_channel(CH5_DATA_L, CH5_DATA_H);

    // Print data for debugging
    printf("AS7341 Data - CH0: %u, CH1: %u, CH2: %u, CH3: %u, CH4: %u, CH5: %u\n", ch0, ch1, ch2, ch3, ch4, ch5);

    // Publish the data via MQTT
    publish_as7341_data(client, ch0, ch1, ch2, ch3, ch4, ch5);
}

int main() {
    stdio_init_all();
    sleep_ms(15000);  // Give time for USB connection to establish and see the output.

    i2c_init_pico(); // Initialize I2C communication for the AS7341 sensor.
    printf("I2C Initialized.\n");
    sleep_ms(8000);
    connect_wifi(); // Connect to Wi-Fi.
    printf("Wi-Fi Connected.\n");

    as7341_init(); // Initialize the AS7341 sensor.
    sleep_ms(5000); // Give some extra time for the sensor to stabilize.

    mqtt_client_t *client = mqtt_client_new(); // Create a new MQTT client.
    connect_to_mqtt_broker(client); // Connect to the MQTT broker.
    printf("Attempting to connect to MQTT broker.\n");

    sleep_ms(3000); // Give time for connection to MQTT broker to stabilize.

    while (true) {
        printf("Reading AS7341 data and publishing...\n");
        read_and_publish_as7341_data(client); // Read data from the AS7341 sensor and publish it.
        sleep_ms(5000);  // Wait before the next reading.
    }

    return 0;
}
